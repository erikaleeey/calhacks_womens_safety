import type { MediaStream } from '@livekit/react-native-webrtc';
import { EventTarget, Event } from 'event-target-shim/index';
type MediaRecorderState = 'inactive' | 'recording' | 'paused';
type MediaRecorderEventMap = {
    dataavailable: BlobEvent<'dataavailable'>;
    error: Event<'error'>;
    pause: Event<'pause'>;
    resume: Event<'resume'>;
    start: Event<'start'>;
    stop: Event<'stop'>;
};
/**
 * A MediaRecord implementation only meant for recording audio streams.
 *
 * @private
 */
export declare class MediaRecorder extends EventTarget<MediaRecorderEventMap> {
    mimeType: String;
    audioBitsPerSecond: number;
    state: MediaRecorderState;
    stream: MediaStream;
    videoBitsPerSecond: number;
    audioBitrateMode: string;
    _reactTag: string | undefined;
    _parts: string[];
    constructor(stream: MediaStream);
    registerListener(): void;
    unregisterListener(): void;
    pause(): void;
    resume(): void;
    start(): void;
    stop(): void;
    requestData(): void;
    dispatchData(): void;
}
/**
 * @eventClass
 * This event is fired whenever the Track is changed in PeerConnection.
 * @param {TRACK_EVENTS} type - The type of event.
 * @param {IRTCTrackEventInitDict} eventInitDict - The event init properties.
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection/track_event MDN} for details.
 */
declare class BlobEvent<TEventType extends string> extends Event<TEventType> {
    /** @eventProperty */
    readonly data: {
        byteArray: Uint8Array;
    };
    constructor(type: TEventType, eventInitDict: {
        data: {
            byteArray: Uint8Array;
        };
    } & Event.EventInit);
}
export {};
